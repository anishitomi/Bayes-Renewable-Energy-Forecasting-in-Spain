---
title: "Bayes Renewable Energy Forecasting"
format: html
author: "Andrew, Wilneris, William, Eugene"
subtitle: "[Github Link](https://github.com/anishitomi/Bayes-Renewable-Energy-Forecasting-in-Spain)"
---

## Introduction

This project focuses on analyzing energy consumption and renewable energy generation in Barcelona through a Bayesian approach using the following datasets, [Data on Kaggle](https://www.kaggle.com/datasets/nicholasjhana/energy-consumption-generation-prices-and-weather/data).

The objectives are:

1.  **Plot the Distribution of Total Energy Demand**: Visualize how energy demand is distributed and explore its variation across different time scales.

2.  **Features Selection**: Investigate whether specific features in the data, such as weather conditions or temporal factors (e.g., day of the week, season, or hour), can predict total energy demand or renewable energy generation from wind and solar sources.

3.  **Forecasting Supply and Demand**: Use Bayesian methods to forecast renewable energy supply and total energy demand, enabling an assessment of the gap between supply and demand.

## Methodology

-   **Datasets:** The first dataset is a 35,064 row and 29 column sheet comprised of different energy source variables and the total load output. The second dataset is a 178,396 row and 17 column sheet comprised of weather features.

-   **Data Preparation**: The datasets were combined and filtered for the city of Barcelona, removed NA values and removed columns that had zero values. We also extracted relevant temporal features like season, month and day of the week. We selected data ranging from 2015 to 2018. The final dataset is a 35,428 row and 42 column sheet.

-   **Bayesian Approach**: Leverage Bayesian modeling to incorporate prior knowledge, quantify uncertainty, and provide probabilistic predictions for more reliable insights.

```{r, include = FALSE}
# Loading in Libraries
library(janitor)
library(here)
library(tidyverse)
library(rstan)
library(bayesrules)
library(bayesplot)
library(broom.mixed)
library(ggpubr)
library(corrplot)
library(car)
library(rstanarm)
```

```{r, warning = FALSE, message=FALSE, include = FALSE}
# Reading in Data
energy_data <- read_csv("Data/energy_dataset.csv")
weather_features_data <- read_csv("Data/weather_features.csv")
```

```{r, warning = FALSE, message=FALSE, include = FALSE}
# Joining the Data Frames Together
names(weather_features_data)[names(weather_features_data) == "dt_iso"] <- "time"
str(weather_features_data)
```

```{r, warning = FALSE, message=FALSE, include = FALSE}
energy_weather_data <- merge(energy_data, weather_features_data, by = c("time"))
```

```{r, warning = FALSE, message=FALSE, include = FALSE}
# Writing a New CSV File
write.csv(energy_weather_data, "energy_weather_data")
```

```{r, warning = FALSE, message=FALSE, include = FALSE}
#Exploratory Analysis
#Exploring Combined Dataset
energy_weather_data <- read_csv("energy_weather_data")
```

```{r, include = FALSE}
# Filter for Barcelona
barcelona_weather_data <- energy_weather_data %>% 
  filter(city_name == "Barcelona")
```

```{r, include = FALSE}
# Looking at the dim of new barcelona_weather_data
dim(barcelona_weather_data)
```

```{r, include = FALSE}
# Count columns that have too much zeros or NAs
df_na <- as.data.frame(colSums(is.na(barcelona_weather_data)))
```

```{r, include = FALSE}
# Count zeros
df_zero <- as.data.frame(colSums(barcelona_weather_data==0))
```

```{r, include = FALSE}
# Combine zero and NA data for better viewing
df_zero_na <- cbind(df_na, df_zero)
```

```{r, include = FALSE}
# Remove other columns such as city_name and have only zero/NA values
barcelona_1 <- subset(barcelona_weather_data, select = -c(city_name, temp_min, temp_max, weather_id, `generation hydro pumped storage aggregated`, `forecast wind offshore eday ahead`, rain_1h, rain_3h, snow_3h))

```

```{r, include = FALSE}
# Removing rows with NA values
barcelona_1 <- na.omit(barcelona_1)
```

```{r, include = FALSE}
# Extract Date Features (Month, Year, Day)
str(barcelona_1$time)
```

```{r, include = FALSE}
barcelona_1$year <- format(barcelona_1$time, "%Y")
barcelona_1$month <- format(barcelona_1$time, "%m")
barcelona_1$day <- format(barcelona_1$time, "%d")
barcelona_1$day_of_the_week <- format(barcelona_1$time, "%a")
```

```{r, include = FALSE}
# Converting columns to numerical items
barcelona_1 <- transform(barcelona_1,
                         month = as.numeric(month),
                         day = as.numeric(day),check.names = FALSE)

# x<- gsub(".", " ", colnames(as.data.frame(barcelona_1)))

names(barcelona_1) <- gsub(".", " ", names(barcelona_1), fixed = TRUE)
```

```{r, include = FALSE}
# Seasons in Spain link: https://seasonsyear.com/Spain/Barcelona
barcelona_1 <- barcelona_1 %>%
  mutate(season = case_when(
    month >= 3 & month <= 5 ~ "Spring",
    month >= 6 & month <= 8 ~ "Summer",
    month >= 9 & month <= 11 ~ "Fall",
    TRUE ~ "Winter"
  ))

```

```{r, include = FALSE}
# This unique function is to just explore different values in certain columns of the dataset
sort(unique(barcelona_1$season))
```

```{r, include = FALSE}
# Removing row with 2014 data value
# Since their is only one value for the year 2014 we decided to remove that row
barcelona_1 <- barcelona_1[!(row.names(barcelona_1) %in% c("1")),]
```

## Frequentist Results and Interpretation

::: panel-tabset
### Correlation

Initially, using a correlation plot aided in the selection of important variables to show any relationship on our target variables of Total Energy Load Output, Solar Energy Load Output and Wind Energy Load Output. Moreover, we intuitively added variables that we believe could strengthen our Bayesian model to forecast Energy Load Outputs. ![](total_new_corrplot.png)

```{r, include = FALSE}
ggplot(data = barcelona_1, aes(x = `price actual`, y = `generation solar`)) +
  geom_hex() +
  stat_smooth(method = "lm") 
```

### Energy Distribution

The graph shows the energy consumption distribution of Barcelona, Spain between 2015 and 2018. The mean energy consumption is at 28,705 MWH. However, possible values range between 18,041 MWH and 41,015 MWH. 

```{r, echo = FALSE}
summary(barcelona_1$`total load actual`)
```

Using Bayes, we are trying to achieve a more certain probability of a range of values and eventually narrow down the ~23,000 MWH gap of energy consumption. 


```{r, warning = FALSE, echo = FALSE, message=FALSE}
ggplot(barcelona_1, aes(x = `total load actual`)) +
  geom_density(alpha = 0.25, fill = "navy") +
  geom_vline(aes(xintercept = mean(`total load actual`)), 
             color = "gold", linewidth = 0.25) +
  labs(x = "Total Energy Output") +
  theme_classic()
```
### Energy Over Time

This plot gives us a general idea of the energy output in Spain from 2015 to 2018 between non-renewable and renewable energy sources. Non-renewable sources trend line show a slow upward slope while renewable sources trend line show a slow downward slope.

```{r, echo = FALSE, message = FALSE}
barcelona_1$renewable_output_sum <- rowSums(select(barcelona_1, `generation biomass`, `generation other renewable`, `generation nuclear`, `generation solar`, `generation wind onshore`), na.rm = TRUE)

ggplot() +
  geom_line(aes(x = time, y  = `total load actual`, color = "navy"),  alpha = 0.25, data = barcelona_1) + 
  geom_smooth(aes(x = time, y = `total load actual`), method = "lm", data = barcelona_1, linewidth = 0.5, color = "gold") +
  geom_line(aes(x = time, y = renewable_output_sum, color = "green"),alpha = 0.25, data = barcelona_1) + 
  geom_smooth(aes(x = time, y = renewable_output_sum), method = "lm", data = barcelona_1, linewidth = 0.5, color = "gray") +
  scale_color_identity(name = NULL, labels = c(green = "Renewable",navy = "Non-Renewable"), guide = "legend") +
  labs(x = "Year") +
  labs(y = "Total Energy Output") +
  theme_classic()

```
### Monthly

This plot shows in any given year between 2015 and 2018, the energy consumption of Barcelona tends to decrease from January to December. During winter and summer, average energy consumption peaks close to 30,000 MWH and during spring and fall, average energy consumption falls close to 27,500 MWH. 
```{r, echo = FALSE, message = FALSE, warning = FALSE}
barcelona_1 %>% 
  group_by(month) %>% 
  summarise(`Average Energy Output` = mean(`total load actual`)) %>% 
  ggplot(data = ., aes(x = month, y = `Average Energy Output`)) + 
  geom_line(color = "navy") +
  geom_smooth(aes(x = month, y = `Average Energy Output`), method = "lm", linewidth = 0.5, color = "gold", se = FALSE) +
  # Shading for Spring (Mar, Apr, May)
  annotate("rect", xmin = 3-0.5, xmax = 5+0.5, ymin = -Inf, ymax = Inf,
           fill = "lightgreen", alpha = 0.25) +
  # Shading for Fall (Sep, Oct, Nov)
  annotate("rect", xmin = 9-0.5, xmax = 11+0.5, ymin = -Inf, ymax = Inf,
           fill = "lightgreen", alpha = 0.25) + 
  scale_x_continuous(breaks = seq_along(month.name),
                     labels = month.name) +
  labs(x = "Months") +
  labs(y = "Average Energy Output") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 55, hjust = 1))
```
### Seasonal Density

Looking at the distribution of output energy per season, we see a similar pattern from the overall total output distribution. 

```{r, warning = FALSE, echo = FALSE, message=FALSE}
ggplot(barcelona_1, aes(x = `total load actual`, fill = season)) +
  geom_density(alpha = 0.25) +
  facet_wrap(~season) + 
  labs(x = "Total Energy Output") +
  theme_classic()
```

### Daily

On any given day, the highest average consumption in Barcelona is during weekdays. This could be accounted for most industries/offices operating at those times. The lowest average consumption is on a Sunday. 
```{r, echo = FALSE}
barcelona_1$day_of_the_week <- factor(barcelona_1$day_of_the_week, 
                         levels = c("Mon", "Tue","Wed","Thu",
                                    "Fri", "Sat", "Sun"))

ggplot(data = barcelona_1, aes(x = day_of_the_week, y = `total load actual`, fill = day_of_the_week)) +
  geom_boxplot(show.legend = FALSE) +
  labs(x = "Day of the Week") +
  labs(y = "Total Energy Output") +
  theme_classic()
```

```{r, include = FALSE}
#Features Importance
#Correlations
barcelona_cor <- barcelona_1 %>% 
  select(where(is.numeric)) %>% 
  select(-c(1))

just_this_cor <- barcelona_cor %>% 
  select(-c(`generation biomass`, `generation hydro run-of-river and poundage`,
            `forecast solar day ahead`, `forecast wind onshore day ahead`,
            `generation other`,`generation nuclear`))

cor_total <- cor(just_this_cor)

#png(filename = "total_corrplot.png", width = 1200, height = 800)

corrplot(cor_total, method = "number")

#dev.off()
```

```{r, include = FALSE}
# Remove more columns that do not show values in correlation matrix
colnames(barcelona_cor)
```

```{r, include = FALSE}
barcelona_new_cor <- barcelona_cor %>% 
  select(-c(`generation fossil coal-derived gas`,`generation fossil oil shale`,
            `generation fossil peat`,`generation geothermal`,`generation marine`,
            `generation wind offshore`))
```

```{r, include = FALSE}
#png(filename = "total_new_corrplot.png", width = 1500, height = 1200)

corrplot(cor(barcelona_new_cor), method = "number", type="lower", tl.srt = 45)

#dev.off()
```

```{r, include = FALSE}
# Use lm() and identify columns that have a statistical significance with 'total load actual' based on columns that have correlation
lm_model <- lm(`total load actual` ~ `generation fossil brown coal/lignite`+
                 `generation fossil gas` + `generation fossil hard coal` +
                 `generation fossil oil` + `generation hydro water reservoir` +
                 `generation solar`, data = barcelona_1)

lm_df <- summary(lm_model)
```

```{r, include = FALSE}
lm_df_tidy <- tidy(lm_df)
head(lm_df_tidy)

lm_df_tidy_significant <- lm_df_tidy %>% 
  filter(p.value < 0.05)

view(lm_df_tidy_significant)
```

```{r, include = FALSE}
barcelona_new <- barcelona_1 %>% 
  select(`generation fossil gas`,`generation fossil hard coal`,
         `generation fossil oil`, `generation hydro water reservoir`, 
         `generation solar`,`total load actual`)
```

```{r, include = FALSE}
lm_model <- lm(`total load actual` ~ ., data = barcelona_new)

summary(lm_model)
```

```{r, include = FALSE}
#Check for multicollinearity (should be after correlation)
vif(lm_model)
```

```{r, include = FALSE}
# Use lm() and identify columns that have a statistical significance with 'generation wind onshore'
summary(barcelona_1$`generation wind onshore`)
summary(barcelona_1$`generation wind offshore`)
```

```{r, include = FALSE}
lm_wind <- lm(`generation wind onshore` ~ ., data = barcelona_1)

lm_wind_model <- summary(lm_wind)

lm_wind_tidy <- tidy(lm_wind_model)

lm_wind_tidy_significant <- lm_wind_tidy %>% 
  filter(p.value < 0.05)

#view(lm_wind_tidy_significant)
```

```{r, include = FALSE}
# Use lm() and identify columns that have a statistical significance with 'generation solar'
lm_solar <- lm(`generation solar` ~ ., data = barcelona_1)

lm_solar_model <- summary(lm_solar)

lm_solar_tidy <- tidy(lm_solar_model)

lm_solar_tidy_significant <- lm_solar_tidy %>% 
  filter(p.value < 0.05)

#view(lm_solar_tidy_significant)
```

```{r, include = FALSE}
summary(lm_solar)
```

:::

## Bayesian Results and Interpretation

With the prior insights discovered during our exploratory data analysis, how can a Bayesian approach predict Total Energy Output with more confidence and a lesser range of values? With the decrease of renewable output, how can we build a model that encourages a positive upward slope so that we are maximizing usage of renewable energy sources? What features can we include so that we can forecast, on a given day or month and available energy sources, the expected energy demand for Barcelona?

### Total Energy Model
Using the correlation matrix, we selected features that either have negative or positive relationship with the Total Energy Output to help us build our model for non-renewable energy output. 

```{r, results = FALSE, message=FALSE}
total_demand <- 
  stan_glm(`total load actual` ~ `generation biomass` + `generation fossil brown coal/lignite` + `generation fossil gas` + `generation fossil hard coal` +  `generation fossil oil` + `generation hydro pumped storage consumption` + `generation hydro water reservoir`+ `generation other renewable` + `generation solar` + `generation nuclear` + temp + humidity + wind_speed + season,
  data = barcelona_1,
  family = gaussian(),
  chains = 4, 
  iter = 5000, 
  seed = 84734
  )
```

We used the data below as new data to predict energy output between seasons.
```{r, echo = FALSE, warning = FALSE, message=FALSE}
barcelona_1 %>% 
  group_by(season) %>% 
  summarise(average_biomass = mean(`generation biomass`),
            average_brown_coal = mean(`generation fossil brown coal/lignite`),
            average_hard_coal = mean(`generation fossil hard coal`),
            average_gas = mean(`generation fossil gas`),
            average_oil = mean(`generation fossil oil`),
            average_hydro_pump = mean(`generation hydro pumped storage consumption`),
            average_reservoir = mean(`generation hydro water reservoir`),
            average_other = mean(`generation other renewable`),
            average_solar = mean(`generation solar`),
            average_nuclear = mean(`generation nuclear`),
            average_temp = mean(temp),
            average_humidity = mean(humidity),
            average_wind = mean(wind_speed))
```


```{r, include = FALSE}
# New data for Fall
total_prediction_fall <- data.frame(
  `generation biomass` = 386.9510,
  `generation fossil brown coal/lignite` = 559.3503,  # mean value
  `generation fossil hard coal` = 4792.954,            # mean value
  `generation fossil gas` = 6205.886,                  # mean value
  `generation fossil oil` = 300.1625,                 # mean value
  `generation hydro pumped storage consumption` = 415.5551,
  `generation hydro water reservoir` = 2129.056,
  `generation other renewable` = 87.03605,
  `generation solar`= 1236.850,
  `generation nuclear` = 6138.958,
  temp = 290.5966,
  humidity = 77.95933,
  wind_speed = 2.520054,
  season = "Fall", 
  check.names = FALSE
)

# New data for Spring
total_prediction_spring <- data.frame(
  `generation biomass` = 357.8086,
  `generation fossil brown coal/lignite` = 284.2471,  # mean value
  `generation fossil hard coal` = 3305.725,            # mean value
  `generation fossil gas` = 4886.975,                  # mean value
  `generation fossil oil` = 291.9479,                 # mean value
  `generation hydro pumped storage consumption` = 542.8384,
  `generation hydro water reservoir` = 3250.740,
  `generation other renewable` = 85.22912,
  `generation solar`= 1516.592,
  `generation nuclear` = 6113.434,
  temp = 287.8753,
  humidity = 74.03539,
  wind_speed = 2.959351,
  season = "Spring", 
  check.names = FALSE
)

# New data for Summer
total_prediction_summer <- data.frame(
  `generation biomass` = 394.4456,
  `generation fossil brown coal/lignite` = 481.1043,  # mean value
  `generation fossil hard coal` = 4546.584,            # mean value
  `generation fossil gas` = 5895.656,                  # mean value
  `generation fossil oil` = 302.4052,                 # mean value
  `generation hydro pumped storage consumption` = 335.8019,
  `generation hydro water reservoir` = 2276.620,
  `generation other renewable` = 84.53691,
  `generation solar`= 1888.378,
  `generation nuclear` = 6313.549,
  temp = 297.6232,
  humidity = 70.50803,
  wind_speed = 2.752949,
  season = "Summer", 
  check.names = FALSE
)

# New data for Winter
total_prediction_winter <- data.frame(
  `generation biomass` = 394.0546,
  `generation fossil brown coal/lignite` = 470.7911,  # mean value
  `generation fossil hard coal` = 4389.933,            # mean value
  `generation fossil gas` = 5507.906,                  # mean value
  `generation fossil oil` = 298.4096,                 # mean value
  `generation hydro pumped storage consumption` = 612.3973,
  `generation hydro water reservoir` = 2761.329,
  `generation other renewable` = 86.07247,
  `generation solar`= 1068.613,
  `generation nuclear` = 6499.138,
  temp = 283.1869,
  humidity = 73.52012,
  wind_speed = 2.914918,
  season = "Winter", 
  check.names = FALSE
)
```

```{r, include = FALSE}
#predictions per season
prediction_fall <- 
  posterior_predict(total_demand, newdata = total_prediction_fall)

prediction_spring <- 
  posterior_predict(total_demand, newdata = total_prediction_spring)

prediction_winter <- 
  posterior_predict(total_demand, newdata = total_prediction_winter)

prediction_summer <- 
  posterior_predict(total_demand, newdata = total_prediction_summer)
```

```{r, include = FALSE}
# frequentist seasonal density
season_frequentist_plot <- 
  ggplot(barcelona_1, aes(x = `total load actual`, fill = season)) +
  geom_density(alpha = 0.25, show.legend = FALSE) +
  facet_wrap(~season) + 
  labs(x = "", y= "")+
  ggtitle("Frequentist Total Energy Distribution per Season") +
  theme_classic() + 
  theme(axis.text.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        plot.title = element_text(hjust = 0.5))
```


```{r, include = FALSE}
demand_forecast_fall <- data.frame(x = density(prediction_fall)$x, 
                                 y = density(prediction_fall)$y)

demand_forecast_spring <- data.frame(x = density(prediction_spring)$x, 
                                 y = density(prediction_spring)$y)

demand_forecast_summer <- data.frame(x = density(prediction_summer)$x, 
                                 y = density(prediction_summer)$y)

demand_forecast_winter <- data.frame(x = density(prediction_winter)$x, 
                                 y = density(prediction_winter)$y)

plot_fall <- ggplot() + geom_area(aes(x=x ,y=y), fill = "orange", alpha = 0.25,  data = demand_forecast_fall) + theme_classic() + labs(x = "Fall", y = "") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank())

plot_spring <- ggplot() + geom_area(aes(x=x ,y=y), fill = "green", alpha = 0.25,  data = demand_forecast_spring) + theme_classic() + labs(x = "Spring",y = "") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank())

plot_summer <- ggplot() + geom_area(aes(x=x ,y=y), fill = "lightblue", alpha = 0.25,  data = demand_forecast_summer) + theme_classic() + labs(x = "Summer", y = "") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank())

plot_winter <-ggplot() + geom_area(aes(x=x ,y=y), fill = "purple", alpha = 0.25,  data = demand_forecast_winter) + theme_classic() + labs(x = "Winter", y = "") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank())

bayes_plot <- 
  ggarrange(plot_fall, plot_spring, plot_summer, plot_winter, ncol = 2, nrow =2)
bayes_plot <-
  annotate_figure(bayes_plot, top = text_grob("Bayesian Total Energy Distribution per Season", size = 13))
```

```{r, include = FALSE}
#mean(prediction_fall)
#min(prediction_fall)
#max(prediction_fall)

#mean(prediction_spring)
#min(prediction_spring)
#max(prediction_spring)

mean(prediction_summer)
min(prediction_summer)
max(prediction_summer)

mean(prediction_winter)
min(prediction_winter)
max(prediction_winter)

```

The frequentist approach during our EDA revealed a wide distribution of predicted values of the total demand output per season. Using a Bayes approach created a more narrow distribution and managed uncertainty of total demand output per season.

For Fall, the mean total output is at 28,395 MWH. However, possible values range between 20,481 MWH and 37,476 MWH. This is around a ~17,000 MWH difference.

For Spring, the mean total output is at 27,994 MWH. However, possible values range between 18,550 MWH and 37,711 MWH. This is around a ~19,000 MWH difference.

For Summer, the mean total output is at 29,185 MWH. However, possible values range between 19,506 MWH and 37,922 MWH. This is around a ~18,000 MWH difference.

For Winter, the mean total output is at 29,347 MWH. However, possible values range between 20,932 MWH and 38,752 MWH. This is around a ~18,000 MWH difference.

Overall, the model a more certain distribution of predicted values for any given season. These distributions are normally distributed and the ranges in values have decreased from a difference of 23,000 MWH to less than 20,000 MWH. 


```{r, echo = FALSE}
ggarrange(season_frequentist_plot, bayes_plot, nrow = 2)
```

### Total Energy Output vs Renewable Energy Output 

```{r, results='hide'}
wind_model <- stan_glm( 
  `generation wind onshore` ~ temp + wind_speed + season,
  data = barcelona_1,
  family = gaussian(),  # ensure this is a function call for the Gaussian family
  chains = 4, 
  iter = 5000, 
  seed = 84736
)
```

```{r, results = 'hide'}
solar_model <- stan_glm( 
  `generation solar` ~ temp + wind_speed + humidity + season,
  data = barcelona_1,
  family = gaussian(),  # ensure this is a function call for the Gaussian family
  chains = 4, 
  iter = 5000, 
  seed = 84736
)
```

We used the data below as new data to predict energy output for the renewable source models of solar and wind.
```{r, echo = FALSE, warning = FALSE, message = FALSE}
barcelona_1 %>% 
  group_by(season) %>% 
  summarise(average_temp = mean(temp),
            average_humidity = mean(humidity),
            average_wind = mean(wind_speed))
```

```{r, error=FALSE, warning=FALSE, message=FALSE, include = FALSE}
wind_new_data <- data.frame(
  temp = 291,
  wind_speed = 2.52,
  season = "Fall",
  check.names = FALSE
)
  
solar_new_data <- data.frame(
  temp = 291,
  wind_speed = 2.52,
  humidity = 78,
  season = "Fall",
  check.names = FALSE 
)
```

We combined the predictions for both wind and solar energy outputs.
```{r, error=FALSE, warning=FALSE, message=FALSE}
wind_prediction <- posterior_predict(wind_model, newdata = wind_new_data)

solar_prediction <- posterior_predict(solar_model, newdata = solar_new_data)

renewable_prediction <- wind_prediction + solar_prediction
```

Plotting the previous total output model and the renewable output model to see the gap. 
```{r, echo = FALSE}

renewable_forecast <- data.frame(x = density(renewable_prediction)$x, 
                                 y = density(renewable_prediction)$y)

ggplot() + 
  geom_area(aes(x=x ,y=y), fill = "navy", alpha = 0.25,  data = demand_forecast_fall) + theme_classic() + labs(x = "", y = "", title = "Distribution between Total Energy Output and Renewable Energy Output") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank()) + 
  geom_area(aes(x=x ,y=y), fill = "green", alpha = 0.25,  data = renewable_forecast) + theme_classic() + labs(x = "", y = "") + theme(axis.text.y = element_blank(),axis.line.y = element_blank(), axis.ticks.y = element_blank())
```

## Conclusion

The Bayesian analysis successfully highlighted key predictors of energy demand, quantified relationships between weather variables and renewable energy generation, and provided probabilistic forecasts of supply-demand gaps. This approach offers a robust framework for managing uncertainty in energy planning and can guide future policy and operational decisions.

The Bayesian approach provided a more precise range of outputs, effectively reducing uncertainty in predictions. This narrower range of possible outcomes equips stakeholders with clearer, more actionable insights, which are essential for effective planning and risk management.
