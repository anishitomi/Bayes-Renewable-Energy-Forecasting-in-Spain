---
title: "Final Project"
format: html
editor: visual
---

## Bayes Renewable Energy Forecasting

[Data on Kaggle](https://www.kaggle.com/datasets/nicholasjhana/energy-consumption-generation-prices-and-weather/data)

**Objective:** Plot the distribution of total energy demand. Can any of the features in the data help us predict demand? Can any of the features in the data help us predict wind or solar energy generation. Can we forecast a renewable energy sources supply and total energy demand to see the gap?

**Guidance:** Join the data, extract features from date (day of week, season, hour, etc..), filter city for Barcelona

## Loading in Libraries

```{r, warning = FALSE, message=FALSE}
# Libraries
library(janitor)
library(here)
library(tidyverse)
library(rstan)
library(bayesrules)
library(bayesplot)
library(broom.mixed)
library(ggpubr)
library(corrplot)
```

## Reading in Data

```{r}
energy_data <- read_csv("Data/energy_dataset.csv")
weather_features_data <- read_csv("Data/weather_features.csv")
```

## Joining the Data Frames Together

```{r}
names(weather_features_data)[names(weather_features_data) == "dt_iso"] <- "time"
str(weather_features_data)
```

```{r}
energy_weather_data <- merge(energy_data, weather_features_data, by = c("time"))
```

```{r}
# Writing a New CSV File
write.csv(energy_weather_data, "energy_weather_data")
```

## Exploratory Analysis

#### Exploring Combined Dataset

```{r}
energy_weather_data <- read_csv("energy_weather_data")
dim(energy_weather_data)
```

#### Filter for Barcelona

```{r}
barcelona_weather_data <- energy_weather_data %>% 
  filter(city_name == "Barcelona")
```

#### Looking at the `dim` of new `barcelona_weather_data`

```{r}
dim(barcelona_weather_data)
```

#### Count columns that have too much `zeros` or `NAs`

```{r}
df_na <- as.data.frame(colSums(is.na(barcelona_weather_data)))
```

#### Count `zeros`

```{r}
df_zero <- as.data.frame(colSums(barcelona_weather_data==0))
```

#### Combine zero and NA data for better viewing

```{r}
df_zero_na <- cbind(df_na, df_zero)
view(df_zero_na)
```

#### Remove other columns such as city_name and have only zero/NA values

```{r}
barcelona_1 <- subset(barcelona_weather_data, select = -c(city_name, temp_min, temp_max, weather_id, `generation hydro pumped storage aggregated`, `forecast wind offshore eday ahead`, rain_1h, rain_3h, snow_3h))

```

#### Extract Date Features (Month, Year, Day)

```{r}
str(barcelona_1$time)
```

```{r}
barcelona_1$year <- format(barcelona_1$time, "%Y")
barcelona_1$month <- format(barcelona_1$time, "%m")
barcelona_1$day <- format(barcelona_1$time, "%d")
barcelona_1$day_of_the_week <- format(barcelona_1$time, "%a")
```

```{r}
# Converting columns to numerical items
barcelona_1 <- transform(barcelona_1,
                         month = as.numeric(month),
                         day = as.numeric(day))
```

##### Seasons in Spain link: <https://seasonsyear.com/Spain/Barcelona>

```{r}
barcelona_1 <- barcelona_1 %>%
  mutate(season = case_when(
    month >= 3 & month <= 5 ~ "Spring",
    month >= 6 & month <= 8 ~ "Summer",
    month >= 9 & month <= 11 ~ "Fall",
    TRUE ~ "Winter"
  ))

```

This unique function is to just explore different values in certain columns of the dataset

```{r}
sort(unique(barcelona_1$season))
```

```{r, warning = FALSE, message=FALSE}
view(barcelona_1)
```

#### Removing row with 2014 data value

##### Since their is only one value for the year `2014` we decided to remove that row

```{r}
barcelona_1 <- barcelona_1[!(row.names(barcelona_1) %in% c("1")),]
```

#### Data Visuals

Plot that looks at the amount of waste generated each year in Barcelona

```{r}
ggplot(data = barcelona_1, aes(x = year, y = `generation waste`, fill = year)) +
  geom_boxplot() 
```

```{r}
ggplot(barcelona_1, aes(x = time, y = `generation biomass`, color = year, group = year)) +
  geom_line(size = .25) +
  labs(title = "Time Series of Value by Year", x = "Date", y = "Generation of Biomass") +
  theme_minimal() +
  scale_color_brewer(palette = "Set1")  # Choose a color palette
```

```{r}
ggplot(data = barcelona_1, aes(x = `price actual`, y = `total load actual`)) +
  geom_point() +
  stat_smooth(method = "lm") +
  stat_cor()
```

Mutliple Box Plots that look at Total Load Actual by Month, Days of the Week, and Season

```{r}
ggplot(data = barcelona_1, aes(x = day_of_the_week, y = `total load actual`, fill = day_of_the_week)) +
  geom_boxplot()

ggplot(data = barcelona_1, aes(x = season, y = `total load actual`, fill = season)) +
  geom_boxplot()
```

## Bayesian Method

## Answering the Following Questions

## 
